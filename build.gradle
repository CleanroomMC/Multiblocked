import org.jetbrains.gradle.ext.Gradle

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.24'
}

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        vendor.set(org.gradle.jvm.toolchain.JvmVendorSpec.AZUL)
    }
    withSourcesJar()
}

minecraft {
    mcVersion = '1.12.2'
    def args = ["-ea:${project.group}"]
    args << '-Dfml.coreMods.load=' + coremod_plugin_class_name
    args << '-Dmixin.hotSwap=true'
    args << '-Dmixin.checks.interfaces=true'
    args << '-Dmixin.debug.export=true'
    extraRunJvmArguments.addAll(args)

    useDependencyAccessTransformers = true

    injectedTags.put("ID", project.archives_base_name)
    injectedTags.put("VERSION", project.version)
}

tasks.injectTags.configure {
    outputClassName.set("com.cleanroommc.multiblocked.Tags")
}

repositories {
    maven {
        url = 'https://maven.cleanroommc.com'
    }
    maven {
        url 'https://cfa2.cursemaven.com'
    }
    maven {
        url 'https://cursemaven.com'
    }
    maven { // CraftTweaker
        url = 'https://maven.blamejared.com/'
    }
    maven {
        url 'https://dvs1.progwml6.com/files/maven/'
    }
    maven {
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
    maven {
        url 'https://maven.hellfiredev.net/'
    }
    maven {
        url 'https://modmaven.dev/'
    }
}

dependencies {

    String mixin = modUtils.enableMixins('zone.rong:mixinbooter:8.6')
    api (mixin) {
        transitive = false
    }
    annotationProcessor (mixin) {
        transitive = false
    }

    implementation 'software.bernie.geckolib:forge-1.12.2-geckolib:3.0.21'
    implementation 'CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.1.20.673'
    implementation 'mezz.jei:jei_1.12.2:4.15.0.293'
    implementation 'curse.maven:the-one-probe-245211:2667280'

    // TODO: settings to enable at runtime for each lib
    compileOnly 'curse.maven:ae2-extended-life-570458:4105092'
    compileOnly 'curse.maven:baubles-227083:2518667'
    compileOnly "curse.maven:botania-225643:3330934"
    compileOnly 'curse.maven:codechicken-lib-1-8-242818:2779848'
    compileOnly 'curse.maven:extra-utilities-225561:2678374'
    compileOnly 'curse.maven:gregtech-ce-unofficial-557242:4527757'
    compileOnly "curse.maven:lightningcraft-237422:2872478"
    compileOnly 'curse.maven:mcmultipart-239431:2615930'
    compileOnly 'curse.maven:mekanism-268560:2835175'
    compileOnly 'curse.maven:nuclearcraft-overhauled-336895:3386487' // Not very latest, requires Forge 2860
    compileOnly 'curse.maven:qmd-362056:3662442'
    compileOnly 'curse.maven:thaumcraft-223628:2629023'
    compileOnly 'curse.maven:thaumic-jei-285492:2705304'
    compileOnly 'curse.maven:prodigy-tech-297414:2769520'
    compileOnly 'curse.maven:patchouli-306770:3162874'
    compileOnly 'curse.maven:natures-aura-306626:2882138'
    compileOnly 'curse.maven:project-e-226410:2702991'
    compileOnly 'curse.maven:blood-magic-224791:2822288'
    compileOnly 'curse.maven:guide-api-228832:2645992'
    compileOnly 'curse.maven:embers-rekindled-300777:3695248'
    compileOnly 'curse.maven:thaumic-augmentation-319441:3536155'
    compileOnly 'curse.maven:mystical-mechanics-300742:3006392'
    compileOnly 'me.desht.pneumaticcraft:pneumaticcraft-repressurized:1.12.2-0.11.9-384'
    compileOnly 'hellfirepvp.astralsorcery:astralsorcery:1.12.2-1.10.23-v161'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version
    // replace stuff in mcmod.info, nothing else
    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        // replace version and mcversion
        fcd.expand (
                'version': project.version,
                'mcversion': project.minecraft.version
        )
    }
}

jar {
    manifest {
        def attribute_map = [:]
        attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
        attribute_map['FMLCorePluginContainsFMLMod'] = true
        attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == "build"
        attributes(attribute_map)
    }
}

idea {
    module { inheritOutputDirs = true }
    project { settings {
        runConfigurations {
            "1. Run Client"(Gradle) {
                taskNames = ['runClient']
            }
            "2. Run Server"(Gradle) {
                taskNames = ['runServer']
            }
            "3. Run Obfuscated Client"(Gradle) {
                taskNames = ['runObfClient']
            }
            "4. Run Obfuscated Server"(Gradle) {
                taskNames = ['runObfServer']
            }
        }
        compiler.javac {
            afterEvaluate {
                javacAdditionalOptions = '-encoding utf8'
                moduleJavacAdditionalOptions = [
                        (project.name + ".main"): tasks.compileJava.options.compilerArgs.collect { '"' + it + '"' }.join(' ')
                ]
            }
        }
    }}
}

tasks.named("processIdeaSettings").configure {
    dependsOn("injectTags")
}
